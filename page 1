"use client"

import { useState } from "react"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Button } from "@/components/ui/button"
import { Separator } from "@/components/ui/separator"
import { Phone, Download, Plus, Trash2 } from "lucide-react"

interface InvoiceItem {
  id: string
  designation: string
  quantity: number
  unitPrice: number
  totalPrice: number
}

export default function InvoiceGenerator() {
  const [invoiceItems, setInvoiceItems] = useState<InvoiceItem[]>([
    { id: "1", designation: "Support BT 31/650", quantity: 5, unitPrice: 145000, totalPrice: 625000 },
    { id: "2", designation: "Support BT 31/200", quantity: 1, unitPrice: 100000, totalPrice: 100000 },
    { id: "3", designation: "Cable 3x70", quantity: 178, unitPrice: 4000, totalPrice: 2050000 },
    { id: "4", designation: "Location Grue", quantity: 1, unitPrice: 250000, totalPrice: 250000 },
    { id: "5", designation: "Pinces ancrage", quantity: 11, unitPrice: 3000, totalPrice: 33000 },
    { id: "6", designation: "Pinces d'alignement", quantity: 4, unitPrice: 2500, totalPrice: 10000 },
    { id: "7", designation: "Raccord", quantity: 8, unitPrice: 1500, totalPrice: 12000 },
    { id: "8", designation: "CO", quantity: 6, unitPrice: 2000, totalPrice: 12000 },
    { id: "9", designation: "Boulons", quantity: 5, unitPrice: 1500, totalPrice: 7500 },
    { id: "10", designation: "Sable, ciment d'ancrage", quantity: 1, unitPrice: 100000, totalPrice: 100000 },
    { id: "11", designation: "Lampes complète 150W", quantity: 2, unitPrice: 160000, totalPrice: 320000 },
  ])

  const [fixedCosts] = useState([
    { designation: "Droit de raccordement", price: 500000 },
    { designation: "Main d'œuvre", price: 200000 },
  ])

  const [clientInfo, setClientInfo] = useState({
    name: "",
    address: "",
    phone: "",
    email: "",
  })

  const updateQuantity = (id: string, newQuantity: number) => {
    setInvoiceItems((items) =>
      items.map((item) =>
        item.id === id ? { ...item, quantity: newQuantity, totalPrice: newQuantity * item.unitPrice } : item,
      ),
    )
  }

  const updateUnitPrice = (id: string, newUnitPrice: number) => {
    setInvoiceItems((items) =>
      items.map((item) =>
        item.id === id ? { ...item, unitPrice: newUnitPrice, totalPrice: item.quantity * newUnitPrice } : item,
      ),
    )
  }

  const addNewItem = () => {
    const newItem: InvoiceItem = {
      id: Date.now().toString(),
      designation: "Nouvel article",
      quantity: 1,
      unitPrice: 0,
      totalPrice: 0,
    }
    setInvoiceItems([...invoiceItems, newItem])
  }

  const removeItem = (id: string) => {
    setInvoiceItems((items) => items.filter((item) => item.id !== id))
  }

  const updateDesignation = (id: string, newDesignation: string) => {
    setInvoiceItems((items) => items.map((item) => (item.id === id ? { ...item, designation: newDesignation } : item)))
  }

  const subtotal = invoiceItems.reduce((sum, item) => sum + item.totalPrice, 0)
  const fixedCostsTotal = fixedCosts.reduce((sum, cost) => sum + cost.price, 0)
  const grandTotal = subtotal + fixedCostsTotal

  const [cieAmount] = useState(150000)

  const formatPrice = (price: number) => {
    return new Intl.NumberFormat("fr-FR").format(price)
  }

  const printInvoice = () => {
    window.print()
  }

  return (
    <div className="min-h-screen bg-gray-50 p-4">
      <div className="max-w-4xl mx-auto">
        <Card className="mb-6">
          <CardHeader className="bg-blue-600 text-white">
            <CardTitle className="text-2xl text-center">INSTALLATION D'UN RÉSEAU ÉLECTRIQUE BT</CardTitle>
            <p className="text-center text-blue-100">DÉTAIL DU DEVIS</p>
          </CardHeader>

          <CardContent className="p-6">
            {/* Client Information */}
            <div className="grid md:grid-cols-2 gap-6 mb-6">
              <div>
                <h3 className="font-semibold mb-3">Informations Client</h3>
                <div className="space-y-2">
                  <Input
                    placeholder="Nom du client"
                    value={clientInfo.name}
                    onChange={(e) => setClientInfo({ ...clientInfo, name: e.target.value })}
                  />
                  <Input
                    placeholder="Adresse"
                    value={clientInfo.address}
                    onChange={(e) => setClientInfo({ ...clientInfo, address: e.target.value })}
                  />
                  <Input
                    placeholder="Téléphone"
                    value={clientInfo.phone}
                    onChange={(e) => setClientInfo({ ...clientInfo, phone: e.target.value })}
                  />
                  <Input
                    placeholder="Email"
                    value={clientInfo.email}
                    onChange={(e) => setClientInfo({ ...clientInfo, email: e.target.value })}
                  />
                </div>
              </div>

              <div className="flex flex-col justify-end">
                <div className="text-right">
                  <p className="text-sm text-gray-600">Date: {new Date().toLocaleDateString("fr-FR")}</p>
                  <p className="text-sm text-gray-600">Devis N°: {Date.now().toString().slice(-6)}</p>
                </div>
              </div>
            </div>

            <Separator className="my-6" />

            {/* Invoice Items Table */}
            <div className="overflow-x-auto">
              <table className="w-full border-collapse">
                <thead>
                  <tr className="bg-gray-100">
                    <th className="border p-3 text-left font-semibold">DÉSIGNATION</th>
                    <th className="border p-3 text-center font-semibold">QUANTITÉ</th>
                    <th className="border p-3 text-right font-semibold">PRIX UNIT. (FCFA)</th>
                    <th className="border p-3 text-right font-semibold">PRIX TOTAL (FCFA)</th>
                    <th className="border p-3 text-center font-semibold">Actions</th>
                  </tr>
                </thead>
                <tbody>
                  {invoiceItems.map((item) => (
                    <tr key={item.id} className="hover:bg-gray-50">
                      <td className="border p-2">
                        <Input
                          value={item.designation}
                          onChange={(e) => updateDesignation(item.id, e.target.value)}
                          className="border-0 bg-transparent"
                        />
                      </td>
                      <td className="border p-2">
                        <Input
                          type="number"
                          value={item.quantity}
                          onChange={(e) => updateQuantity(item.id, Number.parseInt(e.target.value) || 0)}
                          className="text-center"
                          min="0"
                        />
                      </td>
                      <td className="border p-2">
                        <Input
                          type="number"
                          value={item.unitPrice}
                          onChange={(e) => updateUnitPrice(item.id, Number.parseInt(e.target.value) || 0)}
                          className="text-right"
                          min="0"
                        />
                      </td>
                      <td className="border p-2 text-right font-medium">{formatPrice(item.totalPrice)}</td>
                      <td className="border p-2 text-center">
                        <Button
                          variant="ghost"
                          size="sm"
                          onClick={() => removeItem(item.id)}
                          className="text-red-600 hover:text-red-800"
                        >
                          <Trash2 className="h-4 w-4" />
                        </Button>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>

            <div className="mt-4">
              <Button onClick={addNewItem} variant="outline" className="flex items-center gap-2 bg-transparent">
                <Plus className="h-4 w-4" />
                Ajouter un article
              </Button>
            </div>

            <Separator className="my-6" />

            {/* Fixed Costs */}
            <div className="overflow-x-auto">
              <table className="w-full border-collapse">
                <tbody>
                  {fixedCosts.map((cost, index) => (
                    <tr key={index}>
                      <td className="border p-3 font-medium">{cost.designation}</td>
                      <td className="border p-3 text-center">-</td>
                      <td className="border p-3 text-right">-</td>
                      <td className="border p-3 text-right font-medium">{formatPrice(cost.price)}</td>
                      <td className="border p-3"></td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>

            <Separator className="my-6" />

            {/* Totals */}
            <div className="flex justify-end">
              <div className="w-64">
                <div className="flex justify-between py-2">
                  <span>Sous-total articles:</span>
                  <span className="font-medium">{formatPrice(subtotal)} FCFA</span>
                </div>
                <div className="flex justify-between py-2">
                  <span>Coûts fixes:</span>
                  <span className="font-medium">{formatPrice(fixedCostsTotal)} FCFA</span>
                </div>
                <Separator className="my-2" />
                <div className="flex justify-between py-2 text-lg font-bold bg-blue-50 px-3 rounded">
                  <span>TOTAL GÉNÉRAL:</span>
                  <span>{formatPrice(grandTotal)} FCFA</span>
                </div>
                <Separator className="my-2" />
                <div className="flex justify-between py-2 text-lg font-bold bg-green-50 px-3 rounded">
                  <span>CIE:</span>
                  <span>{formatPrice(cieAmount)} FCFA</span>
                </div>
              </div>
            </div>

            <Separator className="my-6" />

            {/* Contact Information */}
            <div className="bg-gray-50 p-4 rounded-lg">
              <div className="flex items-center gap-2 text-blue-600 font-semibold mb-2">
                <Phone className="h-4 w-4" />
                Contact
              </div>
              <p className="text-gray-700">Téléphone: 0748185512</p>
            </div>

            {/* Action Buttons */}
            <div className="flex gap-4 mt-6 justify-center">
              <Button onClick={printInvoice} className="flex items-center gap-2">
                <Download className="h-4 w-4" />
                Imprimer / Télécharger
              </Button>
            </div>
          </CardContent>
        </Card>
      </div>

      <style jsx global>{`
        @media print {
          body * {
            visibility: hidden;
          }
          .print-area, .print-area * {
            visibility: visible;
          }
          .print-area {
            position: absolute;
            left: 0;
            top: 0;
          }
          button {
            display: none !important;
          }
        }
      `}</style>
    </div>
  )
}

